#+OPTIONS: ^:nil
* Problem analysis
  
* How to store potential columns [1/1][100%]

So a column could be having different types.

Right now it can be either string, int or double.

** DONE Representing different types
   CLOSED: [2020-04-25 Sat 21:59]

How can I represent this since Haskell is not super good at dynamic constructs?

I could have that my enum types are parametric.

I had to give the seperate types since the inner types are different.


* Extending program with option [3/5][60%]

** DONE Adding options parsing
   CLOSED: [2020-04-26 Sun 09:41]

** DONE Output to programmer mode
   CLOSED: [2020-04-26 Sun 12:16]

How do I program this?

I could just take the input and based on the type of the column put quotes around.

So for now only string type should get quotes.

I think that I can do this with a zip.

Where should this live?

** DONE Different code modes 
   CLOSED: [2020-04-26 Sun 13:42]

  - Scala
  - Put everything in quotes I could have an --all option

  I could have different options and somewhat randomly use one before the other.

  I could also have code taking options like Scala, "all"

** TODO Option to do percentage for all numerical

    How should I do this?

    Maybe I should calculate a sum.

    I think that I should have a operation that can handle all.

    Maybe it should give result maybe as a column of int.

    So it is possible that I would do another transpose.

    Maybe start by assuming that there is only one.

    How should it combine with other modes?

    Probably ignore in first go.



** TODO Option to do percentage for one

* DONE Needed option 
  CLOSED: [2020-04-26 Sun 12:15]

I think that what I need is pretty simple.

  - -c for code
  - -p for percentage
  - -a for percentage all

* DONE Option parsing
  CLOSED: [2020-04-26 Sun 12:15]

** What parser should I use

I like the applicative parser that I was using. But maybe I do not need something this fancy.

** What do I do with result

So I think that I would like to take the result and put it into a config object.

* Misc

** Refactor ColumnType to better names




